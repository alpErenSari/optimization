function [lambda, iteration] = quadratic_interpolation_search(func, low, max, tol)
    a = linspace(low, max, 3);
    A = a(1);
    B = a(2);
    C = a(3);
    
    y=1;
    iteration=0;
    while y>tol
    p=(A-B)*(B-C)*(C-A);
    a=[func(A)*B*C*(C-B)+func(B)*C*A*(A-C)+func(C)*A*B*(B-A)]/p;
    b=[func(A)*(B^2-C^2)+func(B)*(C^2-A^2)+func(C)*(A^2-B^2)]/p;
    c=-1*[func(A)*(B-C)+func(B)*(C-A)+func(C)*(A-B)]/p;
    lambda=-1*b/[2*c];
    h=a+b*lambda+c*lambda^2;
    f=func(lambda);
    y=abs([h-f]/f);
    if lambda>B && f<func(B)
        A=B;
        B=lambda;
        C=C;
    elseif lambda > B && f>func(B)
            A=A;
            B=B;
            C=lambda;
    elseif lambda < B && f<func(B)
                A=A;
                B=lambda;
                C=B;
    elseif lambda<B && f>func(b)
                    A=lambda;
                    B=B;
                    C=C;
               
           
       
   
    iteration=iteration+1;